{
    "docs": [
        {
            "location": "/", 
            "text": "MuCloud\n\n\nThis software allows \nMuMax3\n GPU-accelerated micromagnetic simulations to be run on a computer without a GPU card. With your \nAmazon Web Services\n (AWS) account, virtual computer instances are created using the \nElastic Compute Cloud\n (EC2). These instances provide on-demand (\nprice per hour\n) access to physical GPU hardware, that allow the simulations to be run remotely. The script interface mimics MuMax3, so that working with MuCloud is as easy as using MuMax3 on a local computer.\n\n\nAuthors: Colin Jermain, Graham Rowlands\n\nLicense: \nMIT License\n \n\nSource code: \nralph-group/mucloud\n on GitHub\n\n\nInstalling\n\n\nMuCloud requires an AWS account and Python 2.7. Instructions for setting up and installing the program are provided depending on your operating system.\n\n\n\n    \n\n        \n\n            \n\n            \n\n                \n\n            \n\n            Linux\n            \n\n        \n\n        \n\n            \n\n            \n\n            \n\n            \n \n            MacOSX\n            \n\n        \n    \n        \n\n            \n\n            \n\n                \n\n            \n\n            Windows\n            \n\n        \n\n    \n\n\n\n\n\nUsage\n\n\nA \nfull tutorial\n is provided to get you started that covers all the functionality of the program. \n\n\nBelow is an example of running Standard Problem 4 with MuCloud on a Windows machine.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#mucloud", 
            "text": "This software allows  MuMax3  GPU-accelerated micromagnetic simulations to be run on a computer without a GPU card. With your  Amazon Web Services  (AWS) account, virtual computer instances are created using the  Elastic Compute Cloud  (EC2). These instances provide on-demand ( price per hour ) access to physical GPU hardware, that allow the simulations to be run remotely. The script interface mimics MuMax3, so that working with MuCloud is as easy as using MuMax3 on a local computer.  Authors: Colin Jermain, Graham Rowlands \nLicense:  MIT License   \nSource code:  ralph-group/mucloud  on GitHub", 
            "title": "MuCloud"
        }, 
        {
            "location": "/#installing", 
            "text": "MuCloud requires an AWS account and Python 2.7. Instructions for setting up and installing the program are provided depending on your operating system.  \n     \n         \n             \n             \n                 \n             \n            Linux\n             \n         \n         \n             \n             \n             \n              \n            MacOSX\n             \n             \n         \n             \n             \n                 \n             \n            Windows", 
            "title": "Installing"
        }, 
        {
            "location": "/#usage", 
            "text": "A  full tutorial  is provided to get you started that covers all the functionality of the program.   Below is an example of running Standard Problem 4 with MuCloud on a Windows machine.", 
            "title": "Usage"
        }, 
        {
            "location": "/install_linux/", 
            "text": "Installing on Linux\n\n\nInstructions for installing the necessary Python libraries and MuCloud on Linux are provided.\n\n\nInstalling Python\n\n\nPython 2.7 is usually already installed through a system package (\npython\n on Ubuntu). Alternatively it can be installed from the \nlatest source release\n. The \npip installer\n is required, which may need to be installed seperately (\npython-pip\n on Ubuntu).\n\n\nInstalling MuCloud\n\n\nFirst, download the \nlatest release from GitHub\n. Extract the files in a good place and open a terminal in that directory.\n\n\ncd /path/to/mucloud\n\n\n\n\nUse the pip installer to install the required Python packages. Optionally, a \nvirtual environment\n can be used to separate the system packages from MuCloud dependencies. Preface the \npip\n commands with \nsudo\n if you are not using a virtual environment.\n\n\nsudo pip install -r requirements.txt\n\n\n\n\nChange the permissions on \nconfig.ini\n to prevent others from reading it.\n\n\nchmod 500 config.ini\n\n\n\n\nNow you have MuCloud installed. The next step is to \nset up the configuration file\n with your AWS settings to allow access to your account.", 
            "title": "Install on Linux"
        }, 
        {
            "location": "/install_linux/#installing-on-linux", 
            "text": "Instructions for installing the necessary Python libraries and MuCloud on Linux are provided.  Installing Python  Python 2.7 is usually already installed through a system package ( python  on Ubuntu). Alternatively it can be installed from the  latest source release . The  pip installer  is required, which may need to be installed seperately ( python-pip  on Ubuntu).  Installing MuCloud  First, download the  latest release from GitHub . Extract the files in a good place and open a terminal in that directory.  cd /path/to/mucloud  Use the pip installer to install the required Python packages. Optionally, a  virtual environment  can be used to separate the system packages from MuCloud dependencies. Preface the  pip  commands with  sudo  if you are not using a virtual environment.  sudo pip install -r requirements.txt  Change the permissions on  config.ini  to prevent others from reading it.  chmod 500 config.ini  Now you have MuCloud installed. The next step is to  set up the configuration file  with your AWS settings to allow access to your account.", 
            "title": "Installing on Linux"
        }, 
        {
            "location": "/install_mac/", 
            "text": "Installing on MacOSX\n\n\nInstructions for installing the necessary Python libraries and MuCloud on MacOSX are provided.\n\n\nInstalling Python\n\n\nOS X Mavericks and Yosemite ship with Python 2.7.5 and 2.7.6 respectively, which are both capable of running MuCloud. Follow the \ninstructions for installing pip\n, which is the Python program for installing dependent packages.\n\n\nInstalling Xcode\n\n\nThe \nXcode development environment\n is required for compilation of C/C++ code included in many Python packages. It can be installed from the App Store. \n\n\nInstalling MuCloud\n\n\nFirst, download the \nlatest release from GitHub\n. Extract the files in a good place and open a terminal in that directory.\n\n\ncd /path/to/mucloud\n\n\n\n\nUse the pip installer to install the required Python packages. Optionally, a \nvirtual environment\n can be used to separate the system packages from MuCloud dependencies. Preface the \npip\n commands with \nsudo\n if you are not using a virtual environment.\n\n\nsudo pip install -r requirements.txt\n\n\n\n\nWith certain versions of Xcode, at least 5.1 and 5.2, you may need to downgrade a particular error to a warning in order for compilation of the required package, \npycrypto\n. This \nerror can be downgraded\n by setting the \nARCHFLAGS\n environment variable and passing it to the sudo environment with the \n-E\n flag.\n\n\nexport ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future\nsudo -E pip install pycrypto \nsudo pip install -r requirements.txt\n\n\n\n\nIf you have established a Python environment that does not require root access for package installation, the \nsudo\n command and \n-E\n flag are not required.\n\n\nFinally, change the permissions on \nconfig.ini\n to prevent others from reading it.\n\n\nchmod 500 config.ini\n\n\n\n\nNow you have MuCloud installed. The next step is to \nset up the configuration file\n with your AWS settings to allow access to your account.", 
            "title": "Install on MacOSX"
        }, 
        {
            "location": "/install_mac/#installing-on-macosx", 
            "text": "Instructions for installing the necessary Python libraries and MuCloud on MacOSX are provided.  Installing Python  OS X Mavericks and Yosemite ship with Python 2.7.5 and 2.7.6 respectively, which are both capable of running MuCloud. Follow the  instructions for installing pip , which is the Python program for installing dependent packages.  Installing Xcode  The  Xcode development environment  is required for compilation of C/C++ code included in many Python packages. It can be installed from the App Store.   Installing MuCloud  First, download the  latest release from GitHub . Extract the files in a good place and open a terminal in that directory.  cd /path/to/mucloud  Use the pip installer to install the required Python packages. Optionally, a  virtual environment  can be used to separate the system packages from MuCloud dependencies. Preface the  pip  commands with  sudo  if you are not using a virtual environment.  sudo pip install -r requirements.txt  With certain versions of Xcode, at least 5.1 and 5.2, you may need to downgrade a particular error to a warning in order for compilation of the required package,  pycrypto . This  error can be downgraded  by setting the  ARCHFLAGS  environment variable and passing it to the sudo environment with the  -E  flag.  export ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future\nsudo -E pip install pycrypto \nsudo pip install -r requirements.txt  If you have established a Python environment that does not require root access for package installation, the  sudo  command and  -E  flag are not required.  Finally, change the permissions on  config.ini  to prevent others from reading it.  chmod 500 config.ini  Now you have MuCloud installed. The next step is to  set up the configuration file  with your AWS settings to allow access to your account.", 
            "title": "Installing on MacOSX"
        }, 
        {
            "location": "/install_windows/", 
            "text": "Installing on Windows\n\n\nInstructions for installing the necessary Python libraries and MuCloud on Windows are provided.\n\n\nInstalling Python\n\n\nDownload the latest release of \nPython 2.7\n (currently 2.7.9 as of 1/23/15). Version 2.7.9 comes with the pip installer, which is required for installing the necessary libraries. If you already have Python 2.7 and want to install pip separately, follow \nthese instructions\n.\n\n\nIn the Python 2.7 installer, under \"Customize Python 2.7\", ensure \"Add python.exe to path\" is included.\n\n\n\n\nDownload and install the \nMicrosoft Visual C++ Compiler for Python 2.7\n. This allows the Python pip installer to compile required C/C++ code that is included in some Python packages.\n\n\nRestart your computer.\n\n\nOpen the command prompt (cmd) and verify that Python is installed properly.\n\n\npython\n\n\n\n\n\n\nTo exit the Python interpreter type \nexit()\n.\n\n\nNow you have the required Python environment.\n\n\nInstalling MuCloud\n\n\nFirst, download the \nlatest release from GitHub\n. Extract the files in a good place and open a command prompt in that directory.\n\n\ncd C:\\path\\to\\mucloud\n\n\n\n\nUse the pip installer to install the required Python packages. Optionally, a \nvirtual environment\n can be used to separate the system packages from MuCloud dependencies.\n\n\npip install -r requirements.txt\n\n\n\n\nNow you have MuCloud installed. The next step is to \nset up the configuration file\n with your AWS settings to allow access to your account.", 
            "title": "Install on Windows"
        }, 
        {
            "location": "/install_windows/#installing-on-windows", 
            "text": "Instructions for installing the necessary Python libraries and MuCloud on Windows are provided.  Installing Python  Download the latest release of  Python 2.7  (currently 2.7.9 as of 1/23/15). Version 2.7.9 comes with the pip installer, which is required for installing the necessary libraries. If you already have Python 2.7 and want to install pip separately, follow  these instructions .  In the Python 2.7 installer, under \"Customize Python 2.7\", ensure \"Add python.exe to path\" is included.   Download and install the  Microsoft Visual C++ Compiler for Python 2.7 . This allows the Python pip installer to compile required C/C++ code that is included in some Python packages.  Restart your computer.  Open the command prompt (cmd) and verify that Python is installed properly.  python   To exit the Python interpreter type  exit() .  Now you have the required Python environment.  Installing MuCloud  First, download the  latest release from GitHub . Extract the files in a good place and open a command prompt in that directory.  cd C:\\path\\to\\mucloud  Use the pip installer to install the required Python packages. Optionally, a  virtual environment  can be used to separate the system packages from MuCloud dependencies.  pip install -r requirements.txt  Now you have MuCloud installed. The next step is to  set up the configuration file  with your AWS settings to allow access to your account.", 
            "title": "Installing on Windows"
        }, 
        {
            "location": "/setup_aws/", 
            "text": "Setting up AWS\n\n\nInstructions for setting up your Amazon Web Services (AWS) account to use with MuCloud are provided.\n\n\nMaking a user\n\n\nBegin by \nsigning up\n for an Amazon Web Services account.\n\n\n\n\nAfter your account has been created, open the \nAWS Console\n.\n\n\n\n\nCurrently the GPU instances are accessible only for the U.S. East region. Choose that region in the upper right drop down menu.\n\n\n\n\nChoose IAM (Identity and Access Management) \n Users \n Create New Users.\n\n\n\n\nCreate a user \"mucloud\" (leave \"Generate access key for each user\" checked). Show the User Security Credentials, and copy the \"Access Key ID\" (\nAccessID\n) and \"Secret Access Key\" (\nSecretKey\n) into the MuCloud \nconfig.ini\n that came with the latest release. \n\n\n\n\nDownload the credentials and keep them in a safe place. Close to return to the Users menu.\n\n\nUnder Users \n mucloud, Attach User Policy.\n\n\n\n\nSearch and select \"AmazonEC2FullAccess\". Attach this policy to the \"mucloud\" user.\n\n\n\n\n\n\nNow your \"mucloud\" user has been created and has full permission to use EC2, without allowing access to any other AWS services for security reasons.\n\n\n\n\nGetting a private key\n\n\nFrom the AWS Console, open up EC2.\n\n\n\n\nChoose Key Pairs \n Create Key Pair. Create a key pair with name \"mucloud\", and update \nconfig.ini\n (\nPrivateKeyName\n) with this name.\n\n\n\n\nDownload the \n.pem\n file and save it to a safe place. On Linux and MacOSX change the permissions of the \n.pem\n file to prevent others from reading it.\n\n\nchmod 500 mucloud.pem\n\n\n\n\nUpdate \nconfig.ini\n with the path of the \n.pem\n private key (\nPrivateKeyFile\n). Now you have a private key with which you can connect to your instance with SSH.\n\n\nCreating a security group\n\n\nFrom EC2, choose Security Groups \n Create Security Group.\n\n\n\n\nSet the security group name to \"mucloud\", and update \nconfig.ini\n (\nSecurityGroups\n) with this name. A description is required by AWS. On the Inbound tab \n Add Rule \n \"Type: SSH\".\n\n\nFor the best security, choose \"Source: My IP\". Note that if your IP changes, \nyou will have to edit the security group again to update the IP.\n Alternatively \"Source: Anywhere\" can be used.\n\n\nAfter you create the security group, your AWS account has been set up properly and your \nconfig.ini\n file has been updated. The next step is to start using MuCloud, or \nfollow the tutorial\n to get started.", 
            "title": "Setting up AWS"
        }, 
        {
            "location": "/setup_aws/#setting-up-aws", 
            "text": "Instructions for setting up your Amazon Web Services (AWS) account to use with MuCloud are provided.  Making a user  Begin by  signing up  for an Amazon Web Services account.   After your account has been created, open the  AWS Console .   Currently the GPU instances are accessible only for the U.S. East region. Choose that region in the upper right drop down menu.   Choose IAM (Identity and Access Management)   Users   Create New Users.   Create a user \"mucloud\" (leave \"Generate access key for each user\" checked). Show the User Security Credentials, and copy the \"Access Key ID\" ( AccessID ) and \"Secret Access Key\" ( SecretKey ) into the MuCloud  config.ini  that came with the latest release.    Download the credentials and keep them in a safe place. Close to return to the Users menu.  Under Users   mucloud, Attach User Policy.   Search and select \"AmazonEC2FullAccess\". Attach this policy to the \"mucloud\" user.    Now your \"mucloud\" user has been created and has full permission to use EC2, without allowing access to any other AWS services for security reasons.   Getting a private key  From the AWS Console, open up EC2.   Choose Key Pairs   Create Key Pair. Create a key pair with name \"mucloud\", and update  config.ini  ( PrivateKeyName ) with this name.   Download the  .pem  file and save it to a safe place. On Linux and MacOSX change the permissions of the  .pem  file to prevent others from reading it.  chmod 500 mucloud.pem  Update  config.ini  with the path of the  .pem  private key ( PrivateKeyFile ). Now you have a private key with which you can connect to your instance with SSH.  Creating a security group  From EC2, choose Security Groups   Create Security Group.   Set the security group name to \"mucloud\", and update  config.ini  ( SecurityGroups ) with this name. A description is required by AWS. On the Inbound tab   Add Rule   \"Type: SSH\".  For the best security, choose \"Source: My IP\". Note that if your IP changes,  you will have to edit the security group again to update the IP.  Alternatively \"Source: Anywhere\" can be used.  After you create the security group, your AWS account has been set up properly and your  config.ini  file has been updated. The next step is to start using MuCloud, or  follow the tutorial  to get started.", 
            "title": "Setting up AWS"
        }, 
        {
            "location": "/tutorial/", 
            "text": "Tutorial\n\n\nAfter installing MuCloud (\nLinux\n, \nMacOSX\n, \nWindows\n) and \nsetting up your Amazon Web Services (AWS) account\n you are ready to start the tutorial.\n\n\nReminder about AWS billing\n\n\nThroughout using MuCloud, remember that your AWS account will be \ncharged per hour\n for each running instance (g2.2xlarge). Fractional hours are billed as full hours. When instances are stopped, you will be \ncharged a small storage fee\n for the instance volume. The best practice is to terminate any instance that you are not using to halt charges.\n\n\nReporting an error\n\n\nIf you experience any error in the the operation of MuCloud, make sure to first stop or terminate your instances as appropriate. This can be done manually in the \nAWS Console\n, under EC2 \n Instances.\n\n\nErrors should be reported through GitHub on our \nIssues page\n.\n\n\nAccessing the help menu\n\n\nOpen a terminal or command prompt and change the directory to where you have stored the MuCloud software. First lets start by accessing the help menu, where you can look for assistance on the command syntax.\n\n\n$ python mucloud.py --help\nusage: mucloud.py [-h] {run,list,launch,terminate,stop,start,reattach} ...\n\nRuns MuMax3 .mx3 files on Amazon Web Services (AWS) instances\n\npositional arguments:\n  {run,list,launch,terminate,stop,start,reattach}\n                        sub-command help\n    run                 run help\n    list                list help\n    launch              launch help\n    terminate           terminate help\n    stop                stop help\n    start               start help\n    reattach            reattach help\n\noptional arguments:\n  -h, --help            show this help message and exit\n\n\n\n\nSpecific help on commands is accessed in the following way.\n\n\n$ python mucloud.py run --help\n\n\n\n\nRunning a simulation\n\n\nSimulations are run by passing a MuMax3 .mx3 file to a running GPU instance. The run command automatically selects an existing and ready instance, or prompts you to start one. For now, lets assume you do not have any instances started.\n\n\nPass the file path of the .mx3 file into the \nrun\n command. If you do not already have a simulation you can use \nStandard Problem 4\n, implemented by MuMax3.\n\n\n$ python mucloud.py run ../tests/standardproblem4.mx3\nThere are no instances waiting to be used.\nCreate a new instance for this job? [Yn]: \n\n\n\n\nAnswer Yes (Y) to create a new instance.\n\n\nCreating a new instance i-d046242d from image ami-3437145c\nWaiting for instance to boot...\n\n\n\n\nThere will be a boot time (typically 1 min) since you are starting up the instance. This can be avoided by \nstarting an instance before using the run command\n.\n\n\nIf you have trouble making a secure connection, make sure that your IP address is included in the security group as was described in the \ninstructions on setting up your AWS account\n.\n\n\nInstance i-d046242d is ready\nMaking secure connection to instance i-d046242d...\nTransferring input file to instance: standardproblem4.mx3\nStarting port forwarding: http://127.0.0.1:35367\n\n\n\n\nAt this point your instance has the simulation file and is about to be started. The software forwards the MuMax3 web-interface, which is accessible through your local browser on \nhttp://127.0.0.1:35367\n. This port can be changed by using the \n--port\n flag of the \nrun\n command.\n\n\n\n\nNow the MuMax3 output is forwarded as the simulation runs. You can interrupt the execution of the simulation using \nCtrl-C\n to cause a keyboard interrupt. Be careful to only use this functionality when you are within the MuMax3 output, as it may otherwise interrupt the normal simulation. This will prompt you to choose between either \ndetaching from the simulation\n (D), aborting the simulation (a), or continuing to run (c).\n\n\n==================== MuMax3 output ====================\n//output directory: /home/ubuntu/simulations/standardproblem4.out/\nstarting GUI at http://127.0.0.1:35367\nsetgridsize(128, 32, 1)\nsetcellsize(500e-9/128, 125e-9/32, 3e-9)\nMsat = 1600e3\nAex = 13e-12\nE_total.get()\nCalculating demag kernel 1 %\nCalculating demag kernel 100 %\n^C\n\nCaught keyboard interrupt during simulation\nDetach, abort, or continue the simulation? [Dac]: \n\n\n\n\nFor now, lets continue if you have interrupted the simulation.\n\n\nContinuing the simulation\n==================== MuMax3 output ====================\n//output directory: /home/ubuntu/simulations/standardproblem4.out/\nstarting GUI at http://127.0.0.1:35367\nsetgridsize(128, 32, 1)\nsetcellsize(500e-9/128, 125e-9/32, 3e-9)\nMsat = 1600e3\nAex = 13e-12\nE_total.get()\nCalculating demag kernel 1 %\nCalculating demag kernel 100 %\nMsat = 800e3\nalpha = 0.02\nm = uniform(1, .1, 0)\nrelax()\nsave(m)\nTOL := 1e-5\nexpectv(\nm\n, m.average(), vector(0.9669684171676636, 0.1252732127904892, 0), TOL)\n//m[0] : 0.9669663906097412 OK\n//m[1] : 0.12527959048748016 OK\n//m[2] : 0 OK\ntableautosave(10e-12)\nautosave(m, 100e-12)\nB_ext = vector(-24.6E-3, 4.3E-3, 0)\nrun(1e-9)\nexpectv(\nm\n, m.average(), vector(-0.9846124053001404, 0.12604089081287384, 0.04327124357223511), TOL)\n//m[0] : -0.9846120476722717 OK\n//m[1] : 0.12604430317878723 OK\n//m[2] : 0.043269284069538116 OK\n==================== MuMax3 output ====================\nStopping port forwarding\nReceiving output files from instance\nRemoving simulation output from instance                             \nRemoving input file from instance\nRemoving logs from instance\nTerminate the instance? [Yn]:\n\n\n\n\nThe data files have already been transfered to the same directory that contained your .mx3 file. At this point you are asked to terminate the instance. Answering Yes (Y) will permanently remove the instance and its storage. Answering No (N), will give you the option to either keep the instance running or stop the instance. In the case the instance is stopped, you will not be charged for the hourly rate, but will incur minor storage fees for the volume. Keeping the instance running allows you to avoid the boot up time on a subsequent simulation. Remember that instances that are not shut down will continue to charge an hourly rate, and it is your responsibility to properly stop or terminate instances.\n\n\nListing instances\n\n\nYou can list which instances are running and which are stopped by using the \nlist\n command. This allows you to examine the AWS ID, IP addresses, and the state of instances, including the port and file of running simulations.\n\n\n$ python mucloud.py list\nMuCloud Instances:\n    ID          IP          State       Port        File\n    i-c253313f  52.4.70.180 simulating  35367       standardproblem4.mx3\n    i-eac3f310  None        stopped     \n\n\n\n\nAbove you can see that one instance (AWS ID: i-c253313f) is simulating \nstandardproblem4.mx3\n with the web-interface displaying on your local port 35367. Another instance (AWS ID: i-eac3f310) is stopped and can be started for future use.\n\n\nStarting an instance\n\n\nSince the boot up time takes a minute, instances can be started directly and independent of the \nrun\n command. There are two methods for starting instances: (1) starting a new instance, and (2) starting a stopped instance using the AWS ID.\n\n\n(1) Starting a new instance\n\n\n$ python mucloud.py launch\n\n\n\n\nThe optional \n--wait\n flag keeps the command from returning until the instance is started.\n\n\n(2) Starting a stopped instance\n\n\n$ python mucloud.py start i-ab9a7c51\n\n\n\n\nAfter (2), we can interrogate the instances to see that i-ab9a7c51 is now ready.\n\n\n$ python mucloud.py list\nMuCloud Instances:\n    ID          IP          State       Port        File\n    i-ab9a7c51  52.1.87.187 ready\n\n\n\n\nA subsequent \nrun\n command will automatically use instance i-ab9a7c51 since it is ready.\n\n\n$ python mucloud.py run ./tests/standardproblem4.mx3\nInstance i-ab9a7c51 is ready\nMaking secure connection to instance i-ab9a7c51...\nTransferring input file to instance: standardproblem4.mx3\n...\n\n\n\n\nStopping an instance\n\n\nStopping an instance can be achieved through the \nstop\n command by passing the AWS ID.\n\n\n$ python mucloud.py stop i-ab9a7c51\n\n\n\n\nTerminating an instance\n\n\nTerminating an instance is the recommend way to deal with instances upon simulation completion, unless further simulations will immediately follow.\n\n\n$ python mucloud.py terminate i-ab9a7c51\n\n\n\n\nDetaching from an instance\n\n\nFor long running simulations, keeping an open connection to the instance may be prohibitive. The detached mode allows the simulations to continue to run even without the MuCloud program connected. The simulation must be \nreattached to\n at a later time in order to retrieve the simulation output. There are two methods for using the detached mode: (1) detaching from a running simulation, and (2) starting a simulation in detached mode.\n\n\n(1) Detaching from a running simulation\n\n\nAs described when \nrunning a simulation\n, using \nCtrl-C\n during the simulation causes a keyboard interrupt. Choose to detach (D) when prompted after the keyboard interrupt.\n\n\nCaught keyboard interrupt during simulation\nDetach, abort, or continue the simulation? [Dac]: D\nDetaching from instance with simulation running\nReattach with: python mucloud.py reattach i-fca5c701\n==================== MuMax3 output ====================\nStopping port forwarding\n\n\n\n\n(2) Starting a simulation in detached mode\n\n\nUse the \n--detach\n flag with the \nrun\n command to automatically go into the detached mode when starting a simulation.\n\n\n$ python mucloud.py run tests/standardproblem4.mx3 --detach\nInstance i-fca5c701 is ready\nMaking secure connection to instance i-fca5c701...\nTransferring input file to instance: standardproblem4.mx3\nStarting port forwarding: http://127.0.0.1:35367\nRunning standardproblem4.mx3 on MuMax3\nStopping port forwarding\nDetaching from instance with simulation running\nReattach with: python mucloud.py reattach i-fca5c701\n\n\n\n\nReattaching to an instance\n\n\nAfter \ndetaching from an instance\n, it is necessary to reattach to retrieve the output files. If the simulation has not yet finished, the MuMax3 output will be updated in the same way as the \nrun\n command.\n\n\n$ python mucloud.py reattach i-fca5c701\nReconnecting to running instance\nMaking secure connection to instance i-fca5c701...\nStarting port forwarding: http://127.0.0.1:35367\n...\n\n\n\n\nNext steps\n\n\nNow you are familiar with all the commands that MuCloud supports, and are ready to start simulations. If you have further questions about the operation, consult the \nsource code\n or \nreport an issue\n on GitHub.", 
            "title": "Tutorial"
        }, 
        {
            "location": "/tutorial/#tutorial", 
            "text": "After installing MuCloud ( Linux ,  MacOSX ,  Windows ) and  setting up your Amazon Web Services (AWS) account  you are ready to start the tutorial.  Reminder about AWS billing  Throughout using MuCloud, remember that your AWS account will be  charged per hour  for each running instance (g2.2xlarge). Fractional hours are billed as full hours. When instances are stopped, you will be  charged a small storage fee  for the instance volume. The best practice is to terminate any instance that you are not using to halt charges.  Reporting an error  If you experience any error in the the operation of MuCloud, make sure to first stop or terminate your instances as appropriate. This can be done manually in the  AWS Console , under EC2   Instances.  Errors should be reported through GitHub on our  Issues page .  Accessing the help menu  Open a terminal or command prompt and change the directory to where you have stored the MuCloud software. First lets start by accessing the help menu, where you can look for assistance on the command syntax.  $ python mucloud.py --help\nusage: mucloud.py [-h] {run,list,launch,terminate,stop,start,reattach} ...\n\nRuns MuMax3 .mx3 files on Amazon Web Services (AWS) instances\n\npositional arguments:\n  {run,list,launch,terminate,stop,start,reattach}\n                        sub-command help\n    run                 run help\n    list                list help\n    launch              launch help\n    terminate           terminate help\n    stop                stop help\n    start               start help\n    reattach            reattach help\n\noptional arguments:\n  -h, --help            show this help message and exit  Specific help on commands is accessed in the following way.  $ python mucloud.py run --help  Running a simulation  Simulations are run by passing a MuMax3 .mx3 file to a running GPU instance. The run command automatically selects an existing and ready instance, or prompts you to start one. For now, lets assume you do not have any instances started.  Pass the file path of the .mx3 file into the  run  command. If you do not already have a simulation you can use  Standard Problem 4 , implemented by MuMax3.  $ python mucloud.py run ../tests/standardproblem4.mx3\nThere are no instances waiting to be used.\nCreate a new instance for this job? [Yn]:   Answer Yes (Y) to create a new instance.  Creating a new instance i-d046242d from image ami-3437145c\nWaiting for instance to boot...  There will be a boot time (typically 1 min) since you are starting up the instance. This can be avoided by  starting an instance before using the run command .  If you have trouble making a secure connection, make sure that your IP address is included in the security group as was described in the  instructions on setting up your AWS account .  Instance i-d046242d is ready\nMaking secure connection to instance i-d046242d...\nTransferring input file to instance: standardproblem4.mx3\nStarting port forwarding: http://127.0.0.1:35367  At this point your instance has the simulation file and is about to be started. The software forwards the MuMax3 web-interface, which is accessible through your local browser on  http://127.0.0.1:35367 . This port can be changed by using the  --port  flag of the  run  command.   Now the MuMax3 output is forwarded as the simulation runs. You can interrupt the execution of the simulation using  Ctrl-C  to cause a keyboard interrupt. Be careful to only use this functionality when you are within the MuMax3 output, as it may otherwise interrupt the normal simulation. This will prompt you to choose between either  detaching from the simulation  (D), aborting the simulation (a), or continuing to run (c).  ==================== MuMax3 output ====================\n//output directory: /home/ubuntu/simulations/standardproblem4.out/\nstarting GUI at http://127.0.0.1:35367\nsetgridsize(128, 32, 1)\nsetcellsize(500e-9/128, 125e-9/32, 3e-9)\nMsat = 1600e3\nAex = 13e-12\nE_total.get()\nCalculating demag kernel 1 %\nCalculating demag kernel 100 %\n^C\n\nCaught keyboard interrupt during simulation\nDetach, abort, or continue the simulation? [Dac]:   For now, lets continue if you have interrupted the simulation.  Continuing the simulation\n==================== MuMax3 output ====================\n//output directory: /home/ubuntu/simulations/standardproblem4.out/\nstarting GUI at http://127.0.0.1:35367\nsetgridsize(128, 32, 1)\nsetcellsize(500e-9/128, 125e-9/32, 3e-9)\nMsat = 1600e3\nAex = 13e-12\nE_total.get()\nCalculating demag kernel 1 %\nCalculating demag kernel 100 %\nMsat = 800e3\nalpha = 0.02\nm = uniform(1, .1, 0)\nrelax()\nsave(m)\nTOL := 1e-5\nexpectv( m , m.average(), vector(0.9669684171676636, 0.1252732127904892, 0), TOL)\n//m[0] : 0.9669663906097412 OK\n//m[1] : 0.12527959048748016 OK\n//m[2] : 0 OK\ntableautosave(10e-12)\nautosave(m, 100e-12)\nB_ext = vector(-24.6E-3, 4.3E-3, 0)\nrun(1e-9)\nexpectv( m , m.average(), vector(-0.9846124053001404, 0.12604089081287384, 0.04327124357223511), TOL)\n//m[0] : -0.9846120476722717 OK\n//m[1] : 0.12604430317878723 OK\n//m[2] : 0.043269284069538116 OK\n==================== MuMax3 output ====================\nStopping port forwarding\nReceiving output files from instance\nRemoving simulation output from instance                             \nRemoving input file from instance\nRemoving logs from instance\nTerminate the instance? [Yn]:  The data files have already been transfered to the same directory that contained your .mx3 file. At this point you are asked to terminate the instance. Answering Yes (Y) will permanently remove the instance and its storage. Answering No (N), will give you the option to either keep the instance running or stop the instance. In the case the instance is stopped, you will not be charged for the hourly rate, but will incur minor storage fees for the volume. Keeping the instance running allows you to avoid the boot up time on a subsequent simulation. Remember that instances that are not shut down will continue to charge an hourly rate, and it is your responsibility to properly stop or terminate instances.  Listing instances  You can list which instances are running and which are stopped by using the  list  command. This allows you to examine the AWS ID, IP addresses, and the state of instances, including the port and file of running simulations.  $ python mucloud.py list\nMuCloud Instances:\n    ID          IP          State       Port        File\n    i-c253313f  52.4.70.180 simulating  35367       standardproblem4.mx3\n    i-eac3f310  None        stopped       Above you can see that one instance (AWS ID: i-c253313f) is simulating  standardproblem4.mx3  with the web-interface displaying on your local port 35367. Another instance (AWS ID: i-eac3f310) is stopped and can be started for future use.  Starting an instance  Since the boot up time takes a minute, instances can be started directly and independent of the  run  command. There are two methods for starting instances: (1) starting a new instance, and (2) starting a stopped instance using the AWS ID.  (1) Starting a new instance  $ python mucloud.py launch  The optional  --wait  flag keeps the command from returning until the instance is started.  (2) Starting a stopped instance  $ python mucloud.py start i-ab9a7c51  After (2), we can interrogate the instances to see that i-ab9a7c51 is now ready.  $ python mucloud.py list\nMuCloud Instances:\n    ID          IP          State       Port        File\n    i-ab9a7c51  52.1.87.187 ready  A subsequent  run  command will automatically use instance i-ab9a7c51 since it is ready.  $ python mucloud.py run ./tests/standardproblem4.mx3\nInstance i-ab9a7c51 is ready\nMaking secure connection to instance i-ab9a7c51...\nTransferring input file to instance: standardproblem4.mx3\n...  Stopping an instance  Stopping an instance can be achieved through the  stop  command by passing the AWS ID.  $ python mucloud.py stop i-ab9a7c51  Terminating an instance  Terminating an instance is the recommend way to deal with instances upon simulation completion, unless further simulations will immediately follow.  $ python mucloud.py terminate i-ab9a7c51  Detaching from an instance  For long running simulations, keeping an open connection to the instance may be prohibitive. The detached mode allows the simulations to continue to run even without the MuCloud program connected. The simulation must be  reattached to  at a later time in order to retrieve the simulation output. There are two methods for using the detached mode: (1) detaching from a running simulation, and (2) starting a simulation in detached mode.  (1) Detaching from a running simulation  As described when  running a simulation , using  Ctrl-C  during the simulation causes a keyboard interrupt. Choose to detach (D) when prompted after the keyboard interrupt.  Caught keyboard interrupt during simulation\nDetach, abort, or continue the simulation? [Dac]: D\nDetaching from instance with simulation running\nReattach with: python mucloud.py reattach i-fca5c701\n==================== MuMax3 output ====================\nStopping port forwarding  (2) Starting a simulation in detached mode  Use the  --detach  flag with the  run  command to automatically go into the detached mode when starting a simulation.  $ python mucloud.py run tests/standardproblem4.mx3 --detach\nInstance i-fca5c701 is ready\nMaking secure connection to instance i-fca5c701...\nTransferring input file to instance: standardproblem4.mx3\nStarting port forwarding: http://127.0.0.1:35367\nRunning standardproblem4.mx3 on MuMax3\nStopping port forwarding\nDetaching from instance with simulation running\nReattach with: python mucloud.py reattach i-fca5c701  Reattaching to an instance  After  detaching from an instance , it is necessary to reattach to retrieve the output files. If the simulation has not yet finished, the MuMax3 output will be updated in the same way as the  run  command.  $ python mucloud.py reattach i-fca5c701\nReconnecting to running instance\nMaking secure connection to instance i-fca5c701...\nStarting port forwarding: http://127.0.0.1:35367\n...  Next steps  Now you are familiar with all the commands that MuCloud supports, and are ready to start simulations. If you have further questions about the operation, consult the  source code  or  report an issue  on GitHub.", 
            "title": "Tutorial"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\nThis software is released with the \nMIT License\n.   \n\n\nCopyright \n 2014-2015 Colin Jermain, Graham Rowlands\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "This software is released with the  MIT License .     Copyright   2014-2015 Colin Jermain, Graham Rowlands  Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.", 
            "title": "License"
        }
    ]
}